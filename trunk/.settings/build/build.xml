<project default="pack_all" basedir=".">

	<!--
                                                   ┌─► jarMain ───────────────────────────┐
                                                   ├─► jarWebupdater ─────────────────────┤
              ┌─► pack_multios ───┐                ├─► jarReconnectOptionals ─────────────┤
    pack_all ─┼─► pack_linux ─────┼─┬─► build_all ─┼─► jarRestarter ──────────────────────┼─► compile ─┬─► clean
              ├─► pack_mac ───────┤ │              ├─► copy_jarOptionals ─► jarOptionals ─┤            │
              └─► pack_windows ───┘ │              ├─► copy_compiled ─────────────────────┘            │
    sign ───────────────────────────┘              └─► copy_res ───────────────────────────────────────┘
    
    dlcEnabledBuild = sign & pack_all
    
    -->

	<property name="src" value="../src" />
	<property name="cls" value="../bin" />
	<property name="dist" value="../dist" />
	<property name="jd" value="${dist}/JDownloader" />
	<property name="res" value="../ressourcen" />
	<property name="pluginres" value="${dist}/pluginressourcen" />
	<property name="keystore" value="${user.home}/Desktop/jDownloader.keystore" />

	<loadfile property="svn.revision" srcFile="../.svn/entries">
		<filterchain>
			<headfilter lines="1" skip="3" />
			<striplinebreaks />
		</filterchain>
	</loadfile>

	<property name="pack.multios.name" value="JDownloader_multios_${svn.revision}.zip" />
	<property name="pack.linux.name" value="JDownloader_linux_${svn.revision}.tar.bz2" />
	<property name="pack.mac.name" value="JDownloader_mac_${svn.revision}.zip" />
	<property name="pack.mac.dmg.name" value="JDownloader_mac_${svn.revision}.dmg" />
	<property name="pack.windows.name" value="JDownloader_windows_${svn.revision}.zip" />

	<property name="exclude.windows" value="**/*.exe, **/*.bat, **/*.dll, **/windows, **/windows/**/*" />
	<property name="exclude.linux" value="**/*.sh, **/*.so, **/dbus, **/dbus/**/*, **/linux, **/linux/**/*" />
	<property name="exclude.mac" value="**/*.scpt, **/osx, **/osx/**/*, **/mac, **/mac/**/*" />

	<property name="exe.windows.script" value="${res}/nsis/nsis-setup.nsi" />
	<!-- <property name="exe.web.script" value="${res}/nsis/webinstaller.nsi" /> -->

	<path id="classpath">
		<fileset dir="${res}/libs" includes="**/*.jar" />
		<fileset dir="${res}/libs_ext" includes="**/*.jar" />
	</path>

	<!-- Deletes the old build -->
	<target name="clean">
		<delete dir="${dist}" />
		<mkdir dir="${dist}" />
	</target>

	<!-- Compiles the code -->
	<target name="compile" depends="clean">
		<mkdir dir="${cls}" />
		<javac srcdir="${src}" excludes="jd/plugins/optional/neembuu/**/*,jd/plugins/optional/remoteserv/**/*" destdir="${cls}" encoding="UTF-8" source="1.5" target="1.5">
			<classpath refid="classpath" />

		</javac>
		<echo message="Finished." />
	</target>

	<!-- build_all -->
	<target name="build_all" depends="copy_res, jarMain, jarWebupdater,jarReconnectOptionals, jarRestarter, copy_compiled, copy_jarOptionals">
		<echo message="Finished." />
	</target>

	<!-- Copies all the additional ressources -->
	<target name="copy_res" depends="clean">
		<copy todir="${jd}/jd">
			<fileset dir="${res}/jd" includes="**/*" />
		</copy>
		<copy todir="${jd}/libs">
			<fileset dir="${res}/libs" includes="**/*" />
		</copy>
		<copy file="../../AppWorkUtils/dist/appworkutils.jar" tofile="${jd}/libs/appworkutilities.jar" overwrite="true" failonerror="false" />
		<copy todir="${jd}/licenses">
			<fileset dir="${res}/licenses" includes="**/*" />
		</copy>

		<copy todir="${jd}/languages">
			<fileset dir="../../AppWorkUtils/src/languages/" includes="**/*.loc" />
		</copy>
		<copy todir="${jd}/images">
			<fileset dir="../../AppWorkUtils/src/images/" includes="**/*.png" />
		</copy>
		<copy todir="${jd}/tools">
			<fileset dir="${res}/tools" includes="**/*" />
		</copy>
		<copy todir="${jd}">
			<fileset dir="${res}" includes="*.txt, *.exe, *.bat, outdated.dat" />
		</copy>
		<mkdir dir="${jd}/tmp" />
	</target>

	<!-- Make the default jar -->
	<target name="jarMain" depends="compile">
		<mkdir dir="${jd}/libs" />
		<manifest file="${dist}/Manifest.MF">
			<attribute name="Created-By" value="JD-Team and AppWork UG" />
		</manifest>
		<jar file="${jd}/libs/JDHttp.jar" manifest="${dist}/Manifest.MF">
			<fileset dir="${cls}">
				<include name="jd/http/**" />
			</fileset>
		</jar>
		<jar file="${jd}/libs/JDGUI.jar" manifest="${dist}/Manifest.MF">
			<fileset dir="${cls}">
				<include name="jd/gui/**" />
			</fileset>
		</jar>
		<jar file="${jd}/libs/JAntiCaptcha.jar" manifest="${dist}/Manifest.MF">
			<fileset dir="${cls}">
				<include name="jd/captcha/**" />
				<exclude name="jd/captcha/methods/**" />
			</fileset>
		</jar>
		<jar file="${jd}/libs/JDUtils.jar" manifest="${dist}/Manifest.MF">
			<fileset dir="${cls}">
				<include name="jd/nutils/**" />
			</fileset>
		</jar>
		<delete file="${dist}/Manifest.MF" failonerror="false" />
		<pathconvert pathsep=" " dirsep="/" property="class-path">
			<path>
				<fileset dir="${jd}/libs" includes="**/*.jar" />
			</path>
			<mapper type="regexp" from="[\\/]dist[\\/]JDownloader[\\/](libs[\\/].*)" to="\1" />
		</pathconvert>
		<manifest file="${dist}/Manifest.MF">
			<attribute name="Created-By" value="JD-Team and AppWork UG" />
			<attribute name="Main-Class" value="jd.Main" />
			<!-- plugins that serialize own classes have to be put in the classpath -->
			<attribute name="Class-Path" value="${class-path} plugins/Customizer.jar plugins/JDScheduler.jar" />
		</manifest>
		<jar file="${jd}/JDownloader.jar" manifest="${dist}/Manifest.MF">
			<fileset dir="${cls}">
				<include name="**/*.class" />

				<exclude name="jd/controlling/reconnect/plugins/*/**" />
				<exclude name="jd/captcha/**" />
				<exclude name="jd/dynamics/**" />
				<exclude name="jd/gui/**" />
				<exclude name="jd/http/**" />
				<exclude name="jd/nutils/**" />
				<exclude name="jd/plugins/hoster/**" />
				<exclude name="jd/plugins/decrypter/**" />
				<exclude name="jd/plugins/optional/**" />
				<exclude name="jd/utils/dev/**" />
				<exclude name="tests/**" />
			</fileset>

			<!-- Put all plugins which should included in here -->
			<fileset dir="${cls}">
				<include name="jd/controlling/reconnect/plugins/extern/**" />
				<include name="jd/controlling/reconnect/plugins/liveheader/**" />				
				<include name="jd/controlling/reconnect/plugins/upnp/**" />

				<include name="jd/plugins/hoster/DirectHTTP*" />
			</fileset>

			<fileset dir="${res}">
				<include name="*.properties" />
				<exclude name="jd/captcha/methods" />
			</fileset>
		</jar>
		<delete file="${dist}/Manifest.MF" failonerror="false" />
	</target>

	<!--Webupdater-->
	<target name="jarWebupdater" depends="compile">
		<mkdir dir="${jd}" />
		<manifest file="${dist}/Manifest.MF">
			<attribute name="Created-By" value="coalado" />
			<attribute name="Main-Class" value="jd.update.Main" />
		</manifest>
		<jar file="${jd}/jdupdate.jar" manifest="${dist}/Manifest.MF">
			<fileset dir="${cls}">
				<include name="jd/update/*.class" />
				<include name="jd/config/*.class" />
				<include name="jd/http/**" />
				<include name="jd/event/**" />
				<include name="jd/controlling/**" />
				<include name="jd/nutils/**" />
				<include name="jd/JDClassLoader.class" />
				<include name="jd/utils/*.class" />
				<include name="jd/plugins/PluginException.class" />
				<include name="jd/parser/Regex.class" />
			</fileset>
			<zipfileset src="${res}/libs/hsqldb.jar" excludes="META-INF/*" />
			<zipfileset src="../../AppWorkUtils/dist/appworkutils.jar" excludes="META-INF/*" />
		</jar>
		<delete file="${dist}/Manifest.MF" failonerror="false" />
	</target>

	<!-- Restarter -->
	<target name="jarRestarter" depends="compile">
		<manifest file="${dist}/Manifest.MF">
			<attribute name="Created-By" value="coalado" />
			<attribute name="Main-Class" value="jd.update.Restarter" />
		</manifest>
		<mkdir dir="${jd}/tools" />
		<jar file="${jd}/tools/tinyupdate.jar" manifest="${dist}/Manifest.MF">
			<fileset dir="${cls}">
				<include name="jd/update/Restarter*.class" />
				<include name="jd/nutils/OutdatedParser*.class" />
				<include name="jd/nutils/DynByteBuff*.class" />
				<include name="jd/nutils/Executer*.class" />
				<include name="jd/nutils/zip/**" />
			</fileset>
		</jar>
		<delete file="${dist}/Manifest.MF" failonerror="false" />
	</target>

	<!-- Copies compiled classes(hoster, decrypter, dynamics -->
	<target name="copy_compiled" depends="compile">
		<mkdir dir="${jd}/jd/plugins/hoster/" />
		<copy todir="${jd}/jd/plugins/hoster/">
			<fileset dir="${cls}/jd/plugins/hoster/">
				<include name="**/*" />
			</fileset>
		</copy>
		<mkdir dir="${jd}/jd/plugins/decrypter/" />
		<copy todir="${jd}/jd/plugins/decrypter/">
			<fileset dir="${cls}/jd/plugins/decrypter/">
				<include name="**/*" />
			</fileset>
		</copy>
		<mkdir dir="${jd}/jd/dynamics/" />
		<copy todir="${jd}/jd/dynamics/">
			<fileset dir="${cls}/jd/dynamics/">
				<include name="*.class" />
			</fileset>
		</copy>
	</target>

	<!-- Use this to build an addon -->
	<macrodef name="buildAddon" description="Function for creating an optional addon">
		<attribute name="number" />
		<attribute name="package" />
		<attribute name="include" />
		<sequential>
			<echo message="Creating @{package}" />
			<mkdir dir="${pluginres}/@{number}__@{package}/plugins" />
			<mkdir dir="${res}/pluginressourcen/@{number}__@{package}" />
			<copy todir="${pluginres}/@{number}__@{package}">
						<fileset dir="${res}/pluginressourcen/@{number}__@{package}" >
							
										<include name="*/**" />
										
									</fileset>
			</copy>
			
			<jar jarfile="${pluginres}/@{number}__@{package}/plugins/@{package}.jar" manifest="${dist}/Manifest.MF">
				<fileset dir="${cls}">
					<include name="jd/plugins/optional/@{include}" />
				</fileset>
			</jar>
		</sequential>
	</macrodef>

	<!-- Build optional addon plugins -->
	<target name="jarOptionals" depends="compile" description="Creates the Optional Plugins">
		<manifest file="${dist}/Manifest.MF">
			<attribute name="Created-By" value="JD-Team" />
		</manifest>
		<buildAddon number="100" package="JDChat" include="jdchat/**" />
		<buildAddon number="101" package="JDwebinterface" include="webinterface/**" />
		<buildAddon number="102" package="infobar" include="infobar/**" />
		<buildAddon number="103" package="lecturnity" include="lecturnity/**" />
		<buildAddon number="104" package="JDRemoteControl" include="remotecontrol/**" />
		<buildAddon number="105" package="JDScheduler" include="schedule/**" />
		<buildAddon number="106" package="JDShutdown" include="JDShutdown*" />
		<buildAddon number="107" package="improveddock" include="improveddock/**" />
		<buildAddon number="120" package="JDLangFileEditor" include="langfileeditor/**" />
		<buildAddon number="122" package="JDInfoFileWriter" include="JDInfoFileWriter*" />
		<buildAddon number="123" package="JDUnrar" include="jdunrar/**" />
		<buildAddon number="127" package="JDHJMerge" include="hjsplit/**" />
		<buildAddon number="128" package="JDTray" include="jdtrayicon/**" />
		<buildAddon number="129" package="ExternInterface" include="interfaces/**" />
		<buildAddon number="130" package="JDPremium" include="jdpremclient/**" />
		<buildAddon number="131" package="JDGrowl" include="JDGrowlNotification*" />
		<buildAddon number="132" package="Customizer" include="customizer/**" />
		<buildAddon number="133" package="AntiShutdown" include="antistandby/**" />
		<buildAddon number="134" package="RouterDBEditor" include="routerdbeditor/**" />
		<buildAddon number="137" package="scriptlauncher" include="scriptlauncher/**" />
		<buildAddon number="140" package="JDFeedMe" include="jdfeedme/**" />
		<buildAddon number="141" package="AntiReconnect" include="antireconnect/**" />
		<buildAddon number="142" package="Extraction" include="extraction/**" />
		<buildAddon number="143" package="folderwatch" include="folderwatch/**" />
		<delete file="${dist}/Manifest.MF" failonerror="false" />
	</target>

	<!-- Use this to build an reconnect plugin -->
	<macrodef name="buildRecPlugin" description="Function for creating an optional router addon">
		<attribute name="name" />

		<sequential>
			<echo message="Creating @{name}" />
			<mkdir dir="${jd}/reconnect/" />
			<jar jarfile="${jd}/reconnect/@{name}.rec" manifest="${dist}/Manifest.MF">
				<fileset dir="${cls}">
					<include name="jd/controlling/reconnect/plugins/@{name}/**" />
				</fileset>
			</jar>
		</sequential>
	</macrodef>

	<!-- Build optional reconnect plugins -->
	<target name="jarReconnectOptionals" depends="compile" description="Creates the Optional Reconnect Addons">
		<manifest file="${dist}/Manifest.MF">
			<attribute name="Created-By" value="JD-Team" />
		</manifest>

		<buildRecPlugin name="batch" />

		<delete file="${dist}/Manifest.MF" failonerror="false" />
	</target>

	<!-- Copy optional addon plugins -->
	<target name="copy_jarOptionals" depends="jarOptionals">
		<mkdir dir="${jd}/plugins" />
		<copy todir="${jd}">
			<fileset dir="${res}/pluginressourcen" includes="**/*" />
			<mapper type="regexp" from="^\d{3}__.*?[\\/](.*)" to="\1" />
		</copy>
		<copy todir="${jd}">
			<fileset dir="${pluginres}" includes="**/*" />
			<mapper type="regexp" from="^\d{3}__.*?[\\/](.*)" to="\1" />
		</copy>
	</target>

	<!-- pack_all -->
	<target name="pack_all" depends="pack_multios, pack_linux, pack_mac, pack_windows">
		<echo message="Finished." />
	</target>

	<!-- pack_multios -->
	<target name="pack_multios" depends="build_all">
		<zip destfile="${dist}/${pack.multios.name}">
			<zipfileset prefix="JDownloader" dir="${jd}" />
		</zip>
	</target>

	<!-- pack_linux -->
	<target name="pack_linux" depends="build_all">
		<move todir="${dist}/.excludes">
			<fileset dir="${jd}" includes="${exclude.mac}, ${exclude.windows}" casesensitive="false" />
		</move>
		<tar destfile="${dist}/${pack.linux.name}" compression="bzip2">
			<zipfileset prefix="JDownloader" dir="${jd}" />
		</tar>
		<move todir="${jd}">
			<fileset dir="${dist}/.excludes" includes="**/*" />
		</move>
		<delete dir="${dist}/.excludes" />
	</target>

	<!-- pack_mac -->
	<target name="pack_mac" depends="build_all">
		<move todir="${dist}/.excludes">
			<fileset dir="${jd}" includes="${exclude.linux}, ${exclude.windows}" casesensitive="false" />
		</move>
		<zip destfile="${dist}/${pack.mac.name}">
			<zipfileset prefix="JDownloader" dir="${jd}" />
		</zip>
		<exec executable="hdiutil" osfamily="mac">
			<arg line='create -ov -srcfolder "${jd}" "${dist}/${pack.mac.dmg.name}"' />
		</exec>
		<move todir="${jd}">
			<fileset dir="${dist}/.excludes" includes="**/*" />
		</move>
		<delete dir="${dist}/.excludes" />
	</target>

	<!-- pack_windows -->
	<target name="pack_windows" depends="build_all">
		<move todir="${dist}/.excludes">
			<fileset dir="${jd}" includes="${exclude.linux}, ${exclude.mac}" casesensitive="false" />
		</move>
		<zip destfile="${dist}/${pack.windows.name}">
			<zipfileset prefix="JDownloader" dir="${jd}" />
		</zip>
		<taskdef name="nsis" classname="net.sf.nsisant.Task">
			<classpath location="nsisant-1.2.jar" />
		</taskdef>
		<echo message="Clean Windows Setup..." />
		<nsis script="${exe.windows.script}" verbosity="2" />
		<echo message="Kikin Windows Setup..." />
		<nsis script="${exe.windows.script}" verbosity="2">
			<define name="ADVERTISING_PLUGIN" value="kikin" />
			<define name="ADVERTISING_OPTOUT" value="1" />
		</nsis>
		<echo message="OpenCandy Windows Setup..." />
		<nsis script="${exe.windows.script}" verbosity="2">
			<define name="ADVERTISING_PLUGIN" value="OpenCandy" />
		</nsis>
		<echo message="NSIS Finished." />
		<!-- <nsis script="${exe.web.script}" verbosity="2" /> -->
		<move todir="${jd}">
			<fileset dir="${dist}/.excludes" includes="**/*" />
		</move>
		<delete dir="${dist}/.excludes" />
	</target>

	<!-- Signs the jars -->
	<target name="sign" depends="build_all">
		<signjar keystore="${keystore}" alias="jDownloader" storepass="jDownloader">
			<path>
				<fileset dir="${jd}" includes="**/*.jar" />
			</path>
		</signjar>
	</target>

	<!-- dlcEnabledBuild -->
	<target name="dlcEnabledBuild" depends="sign, pack_all" />

	<!-- Creates the javadocs -->
	<target name="doc">
		<javadoc destdir="${dist}/javadoc" useexternalfile="yes" maxmemory="256m" Encoding="UTF-8">
			<fileset dir="${src}" />
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
		</javadoc>
	</target>
</project>